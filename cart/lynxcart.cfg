SYMBOLS {
    __STACKSIZE__: type = weak, value = $0800;
    __STARTOFDIRECTORY__: type = weak, value = $00CB;
    __BLOCKSIZE__: type = weak, value = 512;
    __EXEHDR__:    type = import;
    __BOOTLDR__:   type = import;
    __MEMEND__: type = weak, value = $9E58 - __STACKSIZE__;
    __RAMSTART__: type = weak, value = __MEMEND__ - $3000;
    __TITLESIZE__: type = weak, value = $2000;
    __INGAMESIZE__: type = weak, value = $5000;
    __RAMSIZE__: type = weak, value = __MEMEND__ - __RAMSTART__;
}
MEMORY {
    ZP:     file = "", define = yes, start = $0000, size = $0100;
    HEADER: file = %O,               start = $0000, size = $0040;
    BOOT:   file = %O,               start = $0200, size = __STARTOFDIRECTORY__;
    DIR:    file = %O,               start = $0100, size = 4*8;
    RAM:    file = %O, define = yes, start = __RAMSTART__, size = __RAMSIZE__;
    TITLE:  file = %O, define = yes, start = $0300, size = __TITLESIZE__;
    INGAME: file = %O, define = yes, start = $0300, size = __INGAMESIZE__;
}
SEGMENTS {
    EXEHDR:   load = HEADER, type = ro;
    BOOTLDR:  load = BOOT,   type = ro;
    DIRECTORY:load = DIR,    type = ro;
    STARTUP:  load = RAM,    type = ro,  define = yes;
    LOWCODE:  load = RAM,    type = ro,                optional = yes;
    INIT:     load = RAM,    type = ro,  define = yes, optional = yes;
    CODE:     load = RAM,    type = ro,  define = yes;
    RODATA:   load = RAM,    type = ro,  define = yes;
    DATA:     load = RAM,    type = rw,  define = yes;
    BSS:      load = RAM,    type = bss, define = yes;
    ZEROPAGE: load = ZP,     type = zp;
    EXTZP:    load = ZP,     type = zp,                optional = yes;
    APPZP:    load = ZP,     type = zp,                optional = yes;

    TITLE_CODE: load = TITLE, type = ro, define = yes;
    TITLE_DATA: load = TITLE, type = rw, define = yes;
    TITLE_RODATA: load = TITLE, type = ro, define = yes;
    TITLE_BSS: load = TITLE, type = bss, optional = yes;

    INGAME_CODE: load = INGAME, type = ro, define = yes;
    INGAME_RODATA: load = INGAME, type = ro, define = yes;
    INGAME_DATA: load = INGAME, type = rw, define = yes;
    INGAME_BSS: load = INGAME, type = bss, optional = yes;

}
FEATURES {
    CONDES: segment = INIT,
        type    = constructor,
        label   = __CONSTRUCTOR_TABLE__,
        count   = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
        type    = destructor,
        label   = __DESTRUCTOR_TABLE__,
        count   = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
        type    = interruptor,
        label   = __INTERRUPTOR_TABLE__,
        count   = __INTERRUPTOR_COUNT__;
}

